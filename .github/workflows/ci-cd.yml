name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend

jobs:
  # Backend CI Jobs
  backend-lint-and-format:
    name: Backend - Lint and Format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./sample-app/backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Check formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
    
    - name: Run static analysis
      run: dotnet build --no-restore --configuration Release --verbosity normal

  backend-test:
    name: Backend - Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./sample-app/backend
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: TestPassword123!
          ACCEPT_EULA: Y
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123! -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Run unit tests
      run: |
        dotnet test --no-build --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --logger trx \
          --verbosity normal
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: ./sample-app/backend/TestResults
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./sample-app/backend/TestResults
        flags: backend
        name: backend-coverage

  # Frontend CI Jobs
  frontend-lint-and-format:
    name: Frontend - Lint and Format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./sample-app/frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./sample-app/frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Check Prettier formatting
      run: npm run format:check
    
    - name: Type check
      run: npm run type-check

  frontend-test:
    name: Frontend - Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./sample-app/frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./sample-app/frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test:coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: ./sample-app/frontend/coverage
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./sample-app/frontend/coverage
        flags: frontend
        name: frontend-coverage

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: 'csharp,javascript'

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./sample-app/frontend/package-lock.json
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Start SQL Server
      run: |
        docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=TestPassword123!" \
          -p 1433:1433 --name sqlserver -d \
          mcr.microsoft.com/mssql/server:2022-latest
    
    - name: Build and start backend
      run: |
        cd sample-app/backend
        dotnet restore
        dotnet build --no-restore
        dotnet run --project ECommerce.API --no-build &
        sleep 30
    
    - name: Build and start frontend
      run: |
        cd sample-app/frontend
        npm ci
        npm run build
        npm run preview &
        sleep 10
    
    - name: Run Playwright tests
      run: |
        cd sample-app/frontend
        npx playwright install --with-deps
        npx playwright test
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: ./sample-app/frontend/playwright-report/

  # Build and Push Docker Images (only on main branch)
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./sample-app/frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./sample-app/backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}

  # Deploy to Development Environment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-push, e2e-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to AKS Development
      run: |
        az aks get-credentials --resource-group ${{ secrets.AZURE_RG_DEV }} --name ${{ secrets.AKS_CLUSTER_DEV }}
        kubectl apply -f sample-app/deployment/dev/
        kubectl rollout status deployment/ecommerce-frontend -n ecommerce-dev
        kubectl rollout status deployment/ecommerce-backend -n ecommerce-dev

  # Deploy to Production Environment
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to AKS Production
      run: |
        az aks get-credentials --resource-group ${{ secrets.AZURE_RG_PROD }} --name ${{ secrets.AKS_CLUSTER_PROD }}
        kubectl apply -f sample-app/deployment/prod/
        kubectl rollout status deployment/ecommerce-frontend -n ecommerce-prod
        kubectl rollout status deployment/ecommerce-backend -n ecommerce-prod
    
    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 60
        # Run basic health checks
        curl -f https://api.ecommerce.example.com/health || exit 1
        curl -f https://ecommerce.example.com || exit 1

  # Performance Testing (only on main branch)
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        k6 run --out json=performance-results.json sample-app/tests/performance/load-test.js
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results.json

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-prod, performance-test]
    if: always() && (github.ref == 'refs/heads/main' && github.event_name == 'push')
    
    steps:
    - name: Notify on success
      if: needs.deploy-prod.result == 'success' && needs.performance-test.result == 'success'
      run: |
        echo "✅ Deployment to production successful!"
        # Add Slack/Teams notification here
    
    - name: Notify on failure
      if: needs.deploy-prod.result == 'failure' || needs.performance-test.result == 'failure'
      run: |
        echo "❌ Deployment to production failed!"
        # Add Slack/Teams notification here
